

1. 자바 웹 개발환경 개요
2. 클라우드 개발환경과 배포 프로세스
3. 자바 웹 개발환경 구축
4. 프로젝트 생성 및 톰캣 연동



1. 자바 웹 개발환경 개요

	- 자바 언어
		- 간결/강력 객체지향 프로그래밍 언어
		- 플랫폼 독립적, JVM을 통해 어떠한 OS/하드웨어에서도 동작 가능
		- 많은 오픈소스 라이브러리로 생산성 향상, 유지보수 비용 절감
		- 여러 버전이 있고 지원 기간이 다름 (Java EE, Java SE, Java LTS)
				
		- GUI 기반에는 적합하지 않음
		- 하드웨어 정밀 제어에는 적합하지 않음 (C언어 사용)
		- 최신 모던 프로그래밍 언어보다는 구식임

	
	- JVM(Java Virtual Machine)
		- 자바로 만들어진 프로그램을 실행할 수 있는 가상 하드웨어(소프트웨어)
		
		- 특징
			- 하드웨어/OS에 종속되지 않고 동일하게 개발/실행 가능
			
		- 동작 과정
			1. 자바 언어로 소스코드 작성 (.java 파일)
			2. 자바 컴파일러(javac)가 바이트코드로 컴파일 함 (.class 파일)
			3. JVM이 클래스 로더 + 실행 엔진을 활용하여 바이트코드를 분석하여 OS 환경에서 실행
			4. JVM을 지원하는 모든 하드웨어/OS에서 모두 동일하게 실행 가능
		
		- JVM 기반 언어
			- 코틀린, 스칼라, 루비 등
			
	
	- 자바 플랫폼
		- 자바 프로그램이 실행되는 환경을 의미함
		- 자바 API + JVM 으로 구성
		- Java SE, Java EE, Java ME, Java Card, Java TV 등이 있음
		
		
	- 자바 웹 개발환경
	
		- 자바 개발도구(JDK) + 통합개발환경(IDE) + 서블릿컨테이너 + DB
		
			* IDE는 이클립스를 주로 사용
			* 서블릿 컨테이너는 아파치 톰캣을 사용
			* DB는 Oracle jdbc나 mysql mariaDB 등 사용 이 책에서는 H2 사용
		
		
		
		
		- JDK (Java Development Kit)
			- JRE (Java Runtime Environment) + 컴파일러 등
			- IDE에서 자바를 작성하고 실행하기 위해 필요
			- 자바로 만들어진 서버(아파티 톰캣 등) 실행을 위해 필요
			- 상용버전 Oracle JDK와 공개 버전 Open JDK로 나눠서 배포함
				* Open JDK 설치 방법등이 불편해서 깃허브 등을 통해 패키지로 배포하기도 함
				
		
		- IDE (Integrated Development Environment)
			- VS, VSCode, 이클립스, NetBeans, IntelliJ 등이 있음
			
			- 이클립스
				- 대표적 자바 통합개발도구, IBM에서 개발, 오픈소스
				- 플러그인 구조로 다양한 개발을 할 수 있음
				- 안드로이드 스튜디오 이전까지 공식 안드로이드 개발도구였음
				- 고급기능 부재, 획기적인 변화 부재 등으로 IntelliJ에게 자리 내주고있음
				
			- IntelliJ
				- 젯브레인스 사의 자바 개발 도구, 코틀린도 이 회사 작품
				- 저사양 컴퓨터에서 돌리기 힘듦
				- 많은 기능, 편리함
				- 자바 웹 개발은 상용버전인 Ultimate IntelliJ 사용해야 함
				
			- VSCode
				- 프론트엔드 시장의 활성화에 따라 성장하고있는 개발도구
				- 저사양 컴퓨터에서도 잘 돌아가는 가벼움
				- 익스텐션 기능으로 개발자 입맛에 맞게 개발환경 확장 가능 (단, 개인이 다 찾아서 설치해야 함으로 다소 불편함)
	


		- WAS/서블릿 컨테이너
			- 웹서버와 별개의 WAS에 서블릿 컨테이너가 들어있는 구조
			
			- 구조
				- 웹 브라우저 - 웹 서버(정적 컨텐츠용) - WAS(웹서버+서블릿컨테이너)(동적 컨텐츠용) - DB
			
			- 동작
				1. 웹 브라우저에서 웹 서버로 HTTP 요청
				2. 웹 서버에서 WAS로 HTTP 요청
				3. WAS의 서블릿 컨테이너에서 요청에 의한 서블릿 생성, 실행, 파괴 담당
				4. 필요하면 WAS의 서블릿 컨테이너에서 DB와 연동되어 필요한 데이터 받아옴
				5. WAS에서 처리된 요청을 웹 서버로 HTTP 응답함
				6. 웹 서버는 브라우저로 HTTP 응답하고 브라우저에서 화면에 출력
						
			- WAS (Web App Server) : 웹 앱을 구동하는 서버
				- 서블릿 컨테이너 구동
				- 서버 운영 및 관리
				- 장애 대응
				
			- 서블릿 컨테이너 : 서블릿 생성(init()), 실행(service(), doGe(), doPost()), 파괴(destroy()) 담당
				* 아파치 톰캣, Jetty, Undertow, Java EE에서 제공
			
			- 보통 정적 콘텐츠 서비스도 함께 운영함으로, 웹 서버와 WAS를 상호 연동하여 운영함



2. 클라우드 개발환경 및 배포 프로세스

	- 클라우드 개발환경
		- 깃(Git)의 전반적인 이해 및 소스관리 활용
		- 깃허브, 깃랩 등의 소스 공유 및 관리 도구 활용
		- DevOps 개념의 이해
		- AWS(Amazon Web Service), GCP(Google Cloud Platform) 등 클라우드 환경 인프라 활용
		- 도커, 쿠버네티스 등 컨테이너 기반의 개발환경 활용


		* Git : 분산 버전 관리 시스템, 소스파일의 변경사항을 추적하고 협업 사용자들 파일에 대한 작업을 조율함
			* 오프라인 개발 가능, 중앙 저장소가 삭제되어도 원본 복구 가능, Branch에서 각자 개발한 후 최종적으로 Merge 하는 병렬 개발 방식 사용	
		* GitHub : Git으로 관리하는 프로젝트들을 온라인 상에 올리는 사이트. 속도 우선
		* GitLab : Git을 시스템에 설치하고 중앙 서버를 활용하여 Git을 사용할 수 있음. 안정성 우선
		
		* DevOps : 개발과 운영을 연계하는 개발방법론. 기존 물리적인 서버 운영을 클라우드 환경으로 이주시켜 무중단 서비스 개발 및 설계 인프라를 구축하고 운영하는 일
		
		* 서버 : 클라이언트에게 요청에 맞는 서비스를 제공하는 프로그램
		
			- 온프레미스 서버 : 물리적 서버 설비 보유. 시설과 시스템 운용관리를 직접 함. 원하는 대로 구성 가능. 트러블 슈팅 용이
				* 자사 보유 서버실, 데이터 센터
				
			- 클라우드 서버 : 다른 사업자가 보유한 서버 설비를 사용. 시설은 서버 제공자가 관리하고 이용자는 시스템만 운용관리 함. 제공 설비 범위에 한정. 트러블 슈팅 어려움
				* AWS, GCP, Azure 등
				
		
	- 배포 프로세스
		- 배포(=배치) : Deployment. 개발된 결과물을 실제 사용자에게 전달하는 작업
			- 웹의 경우 : 운영중인 서버에 소스코드를 복사하고 WAS에 등록하는 과정
			- 앱의 경우 : 앱 스토어에 앱을 업로드
			- 릴리즈 : 홈페이지 또는 깃허브에 버전 릴리즈 하는 과정
	
		- 웹앱 배포
			- 이클립스에서 실행 방법
				- JSP/서블릿 프로젝트 -> .war로 패키징 -> 톰캣에 전달하여 실행
				- JSP/서블릿 프로젝트 -> 이클립스 자체에서 톰캣과 연동하여 바로 실행 (로컬서버에서는 위의 .war 패키징 과정 생략 가능)
			
			- 운영 서버에 설치하기
				- JSP/서블릿 프로젝트 -> .war로 패키징 -> 운영 서버에 복사 (FTP나 직접 서버에 설치하는 방법 등) -> 서버에 설치된 톰캣 디렉토리의 webapps 폴더에 .war 위치시키기
				
					* 아파치 톰캣 : .war 파일을 원격으로 배포 설치 및 관리 가능한 콘솔 제공(WAS 기능)
	
	
	- DevOps
		- SW 개발 규모의 확장 및 협업의 보편화로, 신속한 개발과, 지속적 유지보수/배포 등의 운영을 병행하기 위한 노력/개발론
		- 과거 : 몇 달간의 작업을 통해 서비스 대규모 업그레이드
		- 현재 : 소규모 분산작업을 통해 수시로 소규모 업그레이드 배포 반복
			* 장점 : 빠른 작업 속도. 빠른 시장 대처. 빠른 배포. 안정성. 확장 가능성. 협업 강화
			
		- 구성요소
			- SCM (Source Code Management) : 팀 단위의 소스코드 버전관리. 깃, SVN 등의 도구 이용
			- CI (Continuous Integration) : 빌드와 테스트의 통합. Jenkins, Travis CI 등의 도구 이용
			- CD (Continuous Deploy) : 지속적인 배포. 원하는 시점에 바로바로 배포할 수 있도록 설정
			- CM (Configuration Management) : 서비스 설정 통합 관리, 운영 서버 OS, 라이브러리 버전, 컴파일 등을 포함
	
	
	
3. 자바 웹 개발환경 구축
	- JDK 설치
	- 아파치 톰캣 설치
	- 이클립스 IDE for 자바 개발자 설치
	- 워크스페이스 지정
	- 이클립스 환경설정
		- 텍스트 인코딩 설정
		- 웹 브라우저 설정
	- 프로젝트 생성 및 연동



4. 프로젝트 생성 및 톰캣 연동
	- 동적 웹 프로젝트 생성 (Dynamic Web Project)
	- 설치된 톰캣 버전과 경로를 프로젝트에 등록
		- 소스폴더 설정. 기본은 src 폴더 사용
		- Web Module 창
			- Context root : 톰캣을 통해 실행할 때 사용되는 진입점. 프로젝트 이름을 기본으로 사용
			- Content directory : html/css/js/JSP/이미지 등 프로젝트에서 사용할 웹 컨텐츠 경로 지정
			- web.xml 생성 : 웹앱 관련 정보를 서블릿 컨테이너로 제공하기 위한 설정파일 생성(체크 옵션)
	
	
	- 아파치 톰캣 연동/JSP 실행
		- JSP 파일 생성
		- JSP 실행 (Tomcat v9.0 -> Run on Server)



















	
	
	