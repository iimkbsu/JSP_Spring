

1. HTML 기초
2. CSS 기초
3. 자바스크립트 기초



1. HTML 기초
	- HTML : Hyper Text Markup Language.
		- 모든 웹 컨텐츠는 HTML로 이뤄져있음
		- 서버에 이미 만들어진 HTML 문서로 존재하거나 서버 프로그램에서 생성한 HTML 두 종류
		- 웹 브라우저는 요청을 통해 받은 HTML 문서를 해석해 화면을 구성
	
	
		- 하이퍼텍스트
			- 다른 정보와 연결된 텍스트. 링크를 통해 이동하며 정보를 얻음
	
		- 마크업 언어
			- 텍스트에 의미를 부여하기 위해 문서에 주석을 다는 표현 시스템
				* HTML의 <태그></태그>
			- XML : eXtensible Markup Language. HTML과는 다르게 자신만의 태그 규격을 정의해서 사용가능. HTML보다 범용적인 마크업 언어
				* <name> 홍길동 </name> <age> 22 </age>
				* HTML을 XML로 정의하여 사용할 수 있음 = XHTML
	

	- HTML 기본 용어

		<태그 속성="값" 속성="값" ...> 내용 </태그>

		- 태그
			- 표준으로 정해져 있으며 태그마다 역할이 다름
				* 종료태그 다 있는 것은 아님
				* 태그 이름 대소문자 구분 안 함
				* 태그에 속성="값"으로 속성 부여 가능
			
		- 속성 
			- 태그에 추가 속성을 부여함
				* 태그마다 사용할 수 있는 속성이 정해져 있음
				* 디자인 속성도 사용 가능하지만 CSS로 처리하는 게 일반적
		
		- 태그 바디 
			- 태그로 둘러쌓여진 내용(컨텐츠)
				* 태그 안에 태그(이중태그) 가능
				* 단, 부모-자식 관계가 정해져있는 태그는 규칙을 따라야 함
		
		- 시멘틱 태그
			- 가독성을 높이기 위해 특별한 의미를 가지게 하는 태그
				* 역할 없음. 디자인 영향도 없음
				* 문서의 구조, 영역을 정의하기 위해 다른 태그들을 묶는 용도로 사용하여 가독성을 높임. 컨테이너라고 부름
				* <header> <footer> <article> <section> <aside> <nav> 등
		
	
	- HTML 문서 구조
		- 기본 구조
		
			<!DOCTYPE html> 	<!--HTML5 문서임을 선언하는 구문. 브라우저가 html5 문서임을 알 수 있음-->
			<html>
			
			<head>
				<meta 속성="값" ....>
				
				<title> 웹브라우저 상단 타이틀 </title> 
				
				<style>
				</style>
	
			</head>
				
			<body>
			
					문서 본문이 위치하는 곳. 웹 브라우저 화면에 출력되는 내용
					
				<script>
				</script>
			</body>
				
			</html>
	
	
	
	- HTML 기본 태그
		- 제목 태그 : <h1></h1> ~ <h6></h6> . 검색 엔진에서 SEO를 사용하기 때문에 제목을 잘 검색될 수 있도록 정하는 것이 중요
		
		- 문단 태그 : <p></p> <div></div> <span></span>
		
		- 목록 태그 : <ul> <li>아이템1</li> <li>아이템2</li> </ul> 순서없는 목록
					<ol> <li>아이템1</li> </ol> 순서 있는 목록
		
	
	- 블록 태그/인라인 태그
		- 블록 태그 : 라인 전체를 혼자 사용하는 태그
		
			* <p></p> 
			* <div></div>
			* <h1></h1>
			* <ul></ul>
			* <form></form>
			
		- 인라인 태그 : 다른 태그요소와 라인을 공유하여 나란히 배치되는 태그
		
			* <span></span>
			* <img src="경로" width="넓이" ...>
			* <a></a>
			* <em></em>
	
				
		- CSS 이용하여 태그 속성 변경 가능
		- 두 가지 형식을 혼합한 display 속성의 inline-block 값을 사용하기도 함
			
			
			
			
2. CSS 기초
	
	- CSS : HTML 문서에 디자인 요소를 담당
		* 디자인과 문서 내용을 분리하여 작성가능
		* 기기에 맞는 반응형 디자인 구현 가능 (PC/스마트폰/패드 등)
		* CSS는 <head>안에 <style>태그로 작성하거나 외부CSS파일에 작성한 후 HTML에서 링크를 걸거나 HTML 문서에서 각 태그에 직접 style= 속성을 부여하는 방식이 있음
		* '속성: 값;' 형식이며 항상 ;으로 끝내야함. 여러 속성을 쓸 경우 ;로 구분해야 함
		
	
	- CSS 작성 방법 3가지
	
		1. 인라인 스타일 시트 
			- HTML 문서의 각 <태그>에 스타일 속성을 정의함 
				* <h1 style="color: red;"> 제목 </h1> 
		
		2. 내장 스타일 시트
			- HTML 문서의 <head></head> 안에 <style></style> 태그를 만들고 태그보디에 선택자 {속성: 값;} 형식으로 작성
			* 
		<head>
			<style> 
		
				h1 {
					background-color: red; font-size: 15px;
				} 
		
			</style>
		</head>
		<body>
			<script>
			</script>
		</body>
		
		
		3. 외장 스타일 시트
			- 외부에 별도 CSS 파일을 만들고 선택자 {속성: 값;...} 형식으로 작성한 후 적용할 HTML에 링크를 걸어 디자인 적용
				* <head> <link rel="stylesheet" href="css경로"> </head>
		


	- Cascading Style Sheet
		- cascading : 위에서 아래로 중첩 적용된다는 뜻
			* 외장 CSS에서 디자인 적용한 태그를 내장 스타일 시트로 바꿀 수 있음
			* 중요도, 명시도가 높을수록 캐스캐이딩되어 스타일로 사용됨
			
			* 중요도
				1. <head>의 <style> (내장 스타일)
				2. <head>의 <style> 내의 @import
				3. <link> css 파일 (외장 스타일)
				4. <link> css 파일 내의 @import
				5. 브라우저 기본 css
				
			* 명시도
				1. !important
				2. 인라인 스타일
				3. 아이디 selector 스타일
				4. 클래스/가상 선택자 스타일
				5. 태그 선택자 스타일
				6. 상속된 스타일



	- 선택자 개념 (셀렉터)
		- HTML 문서에서 특정 부분을 선택하기 위한 구문
			* 태그 : HTML 태그
			* 아이디 : HTML 한 문서에 고유한 아이디만 적용하여 사용 가능
			* 클래스 : HTML 한 문서에 같은 클래스 적용하여 사용 가능

		- 태그 선택자
			
			태그명 {스타일 속성: 값; ....}
			
			태그명, 태그명, 태그명 {스타일 속성: 값; ....}
			
		
		- 아이디 선택자
		
			#아이디명 {스타일 속성: 값; ... }
			
		
		- 클래스 선택자
			
			.클래스명 {스타일 속성: 값; ... }
			
			태그명.클래스명 {스타일 속성: 값; ... }
			
			
			
	
	- 부트스트랩 (Bootstrap)
		- 오픈소스 CSS 라이브러리
		- 일관된 디자인이 적용된 컴포넌트가 클래스 형태로 정의되어 있음
		- 정의된 클래스를 태그에 사용하는 방법으로 디자인 적용
		- 뷰, 리액트 등 사용함으로써 jQuery를 사용하지 않는 추세이므로 jQuery 의존성을 제거한 최신 버전을 사용
		- 부트스트랩 속성을 중첩해서 사용 가능하므로 원하는 디자인으로 만들 수 있음
		
		- 사용방법 두 가지
			1. 전체 부트스트랩 코드를 다운받아 원하는 부분을 수정하여 적용하는 방식
			2. 부트스트랩 디자인 사이트에서 CSS 링크만 이용하여 기본 설정 형태로 바로 사용하는 방식
				* 예) <div class="bg-primary w-75 mt-5 shadow">
				
	
	

3. 자바스크립트 기초

	- 자바스크립트
		- 객체지향 + 함수형 스크립트 언어
		- 기본적인 프로그래밍 언어일뿐만 아니라 HTML 문서에 접근할 수 있는 내장 객체/함수 등을 제공하는 인터프리터 언어
		- 웹 브라우저에서 해석할 수 있는 인터프리터 언어 (한 줄씩 읽어내려가는 언어)
		- 다양한 웹 프레임워크의 기본 언어 (Vue.js/Angular.js/React.js-DOM) (Node.js-서버)
		- HTML 컨텐츠에서 사용자와 상호작용하며 동적으로 변경하는 부분을 담당
		- 이벤트 처리, 사용자 상호작용, 서버 실시간 통신 등을 가능하게 함

			
	- 기본 문법
		- 프로그램 구성요소
			- 변수, 함수, 객체, 클래스
			- 반복문, 조건문
			- 배열, 리스트, 맵 등의 자료구조
			- 비동기 처리 지원
			- HTTP Request response 처리
			
		
			- DOM (Document Object Model. 문서 전체를 객체화 한 모델)
				- HTML/XML로 만들어진 웹 페이지의 컨텐츠/구조/스타일 요소들을 구조화 시키고 표현하여 프로그래밍 언어(자바스크립트)가 이를 접근하여 읽고 조작할 수 있도록 하는 API
			
			- JSON (JavaScript Object Notation. 데이터 표기형식, 객체 정의하는 구문으로 사용)
				- {"키" : "값", "키" : "값" ...} (객체)
					* {"name" : "brian", "age" : 20 }
					
				- ["값", "값", "값" ...] (배열)
					* ["samsung", "LG", "apple"]
					
				- 사용법
					var obj = {name:'kim', age: 20} //오브젝트
					var json = JSON.stringify(obj) // json객체
					var a = JSON.parse(json) //json객체를 원래 오브젝트나 배열로 변환

		
		- 자바스크립트 특징
			- 변수타입 지정 x
			- 선언은 var, let, const 사용
				* var : 재선언 가능
				* let : 재선언 X 재할당 O
				* const : 재선언 X 재할당 X
				
			- 범위 지정 없이 변수를 선언하면 전역변수가 되고 위치에 상관없이 호이스팅 됨
			- 문자열 "" '' 둘 다 사용 가능
			- 함수형 언어 지원, 위치 상관없이 변수, 함수인자, 객체 멤버 등 모든 곳에 사용 가능
			- HTML 문서에서 <head> <body> 영역에서 모두 <script> 태그로 자바스크립트를 작성할 수 있음
			- DOM 접근을 위해 보통 <body> 영역 끝에 작성함. HTML 문서가 모두 로딩 된 후에 적용되기 때문
			- JSON 구조 사용 가능
			- 자바스크립트 코드를 따로 .js로 만들고 HTML 문서에 <script src=".js경로"></script>로 불러와 사용 가능

	
	- 이벤트/DOM 처리
		- 이벤트 발생
			- HTML 문서에 발생하는 버튼클릭, 마우스클릭, 마우스이동, 키보드 입력 등 UI에서 발생하는 이벤트
			- 문서 로딩, 창 크기 변경 등
	
		- 이벤트 처리 방법 세 가지
		
			1. HTML 태그에 이벤트 처리 속성 이용
			
				--------------
				<button type="button" onclick="showName()"> 버튼1 </button>
				
				<script> 
				function showName() {
					함수 작성
				}
				</script>
				---------------
				
				
			2. DOM 요소에 속성 추가
			
				------------------
				<button type="button" id="btn"> 버튼2 </button>
				
				<script>
				document.getElementById("btn").onclick = function() {
					함수작성
				}
				</script>
				------------------
				
				
			3. DOM 요소에 addEventListener()로 콜백함수 등록하기
			
				------------------
				<button type="button" id="btn3"> 버튼3 </button>
				
				<script>
				document.getElementById("btn").addEventListner('click', function() {
					함수 작성
				})
				------------------
			
			
	- DOM 접근하여 객체 갖고오기
		
		document.getElementById("id명");
		document.getElementByTagName("tag명");
		document.getElementByClassName("클래스명");
		document.getElementByName("이름속성");
		document.getquerySelector("p.title");  	// 첫 번째 노드만 가지고 옴
		document.getquerySelectorAll("p.title"); 	// 일치하는 전체 노드 가지고 옴
			
			* 쿼리셀렉터가 조금 더 구체적임. 하지만 현업에서는 ById를 제일 많이 씀
			* 참고로 가져온 객체는 변수에 저장할 수 있음 
			var id_1 = document.getElementBuId("id명");
			
			
	
	- 가져온 DOM 객체의 속성 get/set/remove
		
		<input id="input_text" name="content" data-value="hello"/>
		
		<script>
		let inputNode = document.getElementById("input_text");
		let input_name = inputNode.getAttribute("name");
		
		document.getElementById("input_text").setAttribute("name", "notContent");
		
		inputNode.removeAttribute("data_value");
		</script>
		
	
	
	
	
	- DOM을 활용한 동적 디자인
		- 스타일 속성 변경
			document.getElementById("box1").setAttribute("style", "background-color: yellow");
		
		- 스타일 객체 변경
			document.getelementById('box1').style.backgroundColor = "yellow";

		- 클래스 변경
			document.getElementById("box1").className = "bgyellowBox";




















			