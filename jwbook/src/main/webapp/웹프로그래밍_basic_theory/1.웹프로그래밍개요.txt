

1. 웹의 개요
2. 네트워크와 인터넷의 개념
3. 웹 프로그래밍의 구조
4. 새로운 웹 개발 트랜드



1. 웹의 개요

	- 웹 : WWW(World Wide Web), 인터넷 상에서 운영되는 서비스 중 하나, HTML을 통해 정보의 연결이 가능하도록 하이퍼텍스트를 포함한 컨텐츠 제공,
		HTTP 프로토콜을 사용해 TCP/IP 네트워크상에서 서비스를 운영하게 된 것이 시작.
		
	- 웹 동작 구조 : HTML로 만들어진 컨텐츠는 웹 서버(별도의 서버 소프트웨어)를 통해 제공되고 이를 웹 브라우져 프로그램을 통해 클라이언트(사용자)가 사용함
		- 웹 서버에는 아파치가 대표적
		- 웹 브라우저는 크롬, 엣지, 사파리 등
		
		- 구체적 동작 과정
			- 1. 클라이언트에서 웹 브라우저를 사용하여 주소창에 https://www.hanbit.co.kr/index.html를 입력한다
			- 2. DNS 서버에서 www.hanbit.co.kr이라는 도메인을 가진 IP 주소를 웹 브라우저에 제공한다
			- 3. 웹 브라우저는 해당 IP 주소 서버의 80번 포트로 접속을 시도하고 서버 포트에서는 접속 요청이 들어오면 접속을 허용한다 (request)
			- 4. 웹 서버는 요청 내용을 분석하고 index.html 파일을 디스크에서 읽는다
			- 5. 웹 서버는 읽은 내용을 텍스트 그대로 클라이언트에 전송한다 (response)
			- 6. 웹 브라우저는 웹 서버에서 전송된 텍스트 내용 중 HTML 태그를 분석하고 웹 브라우저에 맞게 변환하여 화면으로 구성하여 출력한다
			



2. 네트워크와 인터넷의 개념

	- 네트워크 : 컴퓨터끼리 연결해주는 망, 연결에 필요한 규약(프로토콜)이 필요함

	- 인터넷 : Internet. 글로벌 네트워크를 의미함.
		- 인터넷 기반 서비스 : 이메일, FTP, Telnet, DNS, 웹 서비스 등이 있고 이 중 웹 서비스가 가장 대표적
			- 웹 기반의 서비스로 이메일, FTP를 대체해서 이용함
			- 모바일 기기에서는 웹이 아닌 설치된 앱(APP)을 통해 인터넷 기반 서비스를 이용함.
				- 하이브리드형 : 웹 컨텐츠를 모바일 화면에 맞게 보여주는 형태
				- 네이티브형 : 서버에서 데이터만 받아와서 자체 모바일 앱에서 직접 화면을 생성해서 보여주는 형태
				
		- 프로토콜 : TCP/IP 사용함. 하트웨어, OS, 접속 매체와 관계없이 동작하는 개방형 구조라서 기본 프로토콜로 자리잡음.
		- IP 주소 : 255.255.255.255 형식. A~E 클래스로 구분. 공인IP와 사설IP로 나뉨. DHCP를 통해 동적IP(사설IP)를 배정받을수 있어서 IPv4 주소 부족을 어느정도 해결 함. (아직도 IPv6가 자리잡지 못 한 이유)
		- 포트 : 하나의 컴퓨터에 여러 개의 네트워크 서비스를 제공하는 경우 이를 구분하기 위한 출입문 번호 (보안을 위해 사용하지 않는 포트는 닫아두자)
		- DNS : 도메인 이름을 IP주소로 변환해주는 시스템.
		

3. 웹 프로그래밍의 구조
	- 웹 서비스를 제공하기 위해서는 서버컴퓨터와 서버에서 동작하는 여러 프로그램이 필요함.
	
	- 클라이언트-서버 구조
		- 클라이언트 : 서비스를 이용하는 주체 (서비스 사용자)
		- 서버 : 서비스를 제공하는 컴퓨터 또는 프로그램 (서비스 공급자)
		
		- 프론트엔드 : 클라이언트에서 동작하는 프로그램 영역 (HTML/CSS/JS) (앵귤러, 리액트, 뷰)
		- 백엔드 : 서버에서 동작하는 프로그램 영역 (서블릿/JSP, 스프링프레임워크, 파이썬)
		
	- HTML/CSS/JS
		- 프런트엔드(클라이언트) 영역을 구성하는 핵심 프로그램 기술
		
		- HTML(HyperTextMakrupLanguage)
			- 문서 구조 정의, 컨텐츠 표현하는 기본 마크업 언어
			- 웹을 통해 컨텐츠를 제공하려면 반드시 필요함
			- 태크<> 표기법을 사용하여 표현하고자 하는 정보에 의미를 부여함
			
		- CSS(Cascading Style Sheet)
			- HTML로 작성된 문서에 레이아웃, 디자인 등 시각적 요소를 정의하기 위한 규격
			- HTML 문서의 요소들을 셀렉터로 지정하여 디자인 속성을 부여함
			
		- JavaScript (앵큘러/뷰/리액트, 타입스크립트)
			- 동적으로 변하는 컨텐츠를 표현하기 위해 서버 연결 없이 이벤트를 처리하거나 서버와 연결시키고 데이터를 가져오는 역할 등을 하는 프로그래밍 언어
			- 특히 서버 연결 없이 동적 이벤트를 처리하기 위한 프론트엔드 라이브러리(프레임워크)인 앵귤러, 뷰, 리액트는 모두 자바스크립트 언어로 되어있다.
				
				
				
	- 백엔드/프런트엔드 개발
		- 서버에서 이루어지는 백엔드 프로그래밍이 웹 개발의 대부분이었으나 스마트폰 비중이 높아지고 REST API, MSA 등 새로운 서버 구현 기법이 확산되면서 프론트엔드 중심 개발이 인기임
		
			* MSA (MicroService Architecture) : 소규모 분산 서비스 아키텍쳐
			* REST API : 이름으로 자원을 구분(표현)하고 이를 사용하여 자원의 상태(정보)를 주고 받는 소프트웨어 인터페이스
				- HTTP URI를 통해 자원(Resource)를 명시하고 HTTP Method(POST/GET/PUT/DELETE)를 통해 해당 자원에 CRUD 적용하는 API
					* CRUD : Create/Read/Update/Delete
		
		- 백엔드 중심 개발
			- 전통적인 웹 개발 모델
			- 서버에서 모든 것을 담당하고 웹 브라우저는 이미 만들어진 화면을 출력만 함
			- 모바일 환경에 부적합
			- 모놀리식(대규모 서버 구축) 아키텍처 방식(백엔드 중심)보다는 REST API와 클라우드 인프라를 사용하여 소규모 서버를 여럿 연동하는 MSA 방식(프론트엔드 중심)이 떠오르고있음
			
			- 백엔드 동작 개요
				- 1. 클라이언트에서 웹 브라우저를 사용하여 URL 형태로 서버에 요청
				- 2. 요청을 받은 서버는 서블릿, 자바(스프링), Node.js 등을 통해 DB와 연결하고 필요한 데이터를 가져옴 (DB 연동)
				- 3. 서버에서 JSP를 사용하여 HTML과 데이터를 조합하여 페이지를 구성(렌더링) (SSR)
				- 4. 구성한 페이지는 HTML 형태로 클라이언트 웹 브라우저에 전송(응답)되고 창에 화면을 출력함
				
					- URI : URL의 상위 개념. 특정 화면이나 데이터를 가져오기 위한 서버 프로그램과 파라미터
					- URL : 특정 파일 등의 위치
					
			- 백엔드 개발 장점
				- 서비스 연동에 필요한 다양한 서버 환경 대응
				- 검색엔진 최적화에 유리
				- 기술이 안정적이고 검증됨
				- 기존에 개발된 레거시 시스템이 많고 오래 유지됨
			
			
			
			
		- 프런트엔드 중심 개발
			- 클라이언트에 이미 HTML을 가지고 있거나 서버에서 빈 HTML과 화면구성에 필요한 데이터를 JS로 받아와서 웹 브라우저(클라이언트)에서 화면을 구성(렌더링)하여 출력함
			- CSR 방식
			- 데이터 제공을 담당하는 서버는 프론트엔드든 백엔드든 무조건 필요함
			- 데이터 제공 서버는 보통 REST API로 개발됨
			- 프론트엔드+백엔드 조합(풀스택) 개발도 가능
			
			- 프런트엔드 동작 개요
				- 1. 클라이언트에서 웹 브라우저를 사용하여 URI 형태로 서버에 요청
				- 2. 요청을 받은 서버는 자바 서블릿, Node.js, JAX-RS 등을 통해 DB와 연결하고 필요한 데이터를 가져옴 (DB 연동)
				- 3. 서버는 DB에서 가져온 데이터 등 화면 구성에 필요한 데이터를 JSON 형태로 클라이언트에 전송(응답)
				- 4. 웹 브라우져에서 HTML/CSS/JS를 사용하여 받은 데이터를 렌더링(CSR)하여 클라이언트에게 창에 화면을 출력함
				
			- 프런트엔드 개발 장점
				- 서버로부터 매번 갱신된 전체 화면을 받아올 필요가 없이 필요한 부분의 데이터만 갱신하여 랜더링 후 출력하면 됨
				- 실시간 데이터 갱신 자유로움
				- SPA(Single Page App), PWA(Progressive Web App) 구현에 적용 가능
				- 리액트, 뷰, 앵귤러 등 자바스크립트 라이브러리(프레임워크)를 사용할 수 있음
				

4. 웹 개발 트랜드 (백엔드 -> 프론트엔드)

	- 자바 언어의 대안
		- 자바는 구식언어(26년 됨)
		- 자바 대안으로 안드로이드-코틀린(자바와 완벽호환/JVM에서 돌아감), 자바 오픈소스 프레임워크인 스프링에서도 자바 대신 코틀린 사용 확대
	
	- 백엔드 DevOps 환경 변화
		- 스프링 프레임워크 : 대규모 사용 서비스를 위한 자바 엔터프라이즈 에디션 (Java EE)의 방대한 스펙과 구현 복잡함으로 인해 스프링 프레임워크 등장
		- MSA 방식 전환 : 클라우드 기반 서비스 운영의 보편화로 인해 모놀리식에서 소규모 분산 서비스인 MSA로 전환됨
		- 프론트엔드에서 화면을 다룸 : REST API 형태의 개발로 인해 백엔드에서 화면을 다루는 경우가 줄어듦
			* 서버리스 환경 : 서버없이 클라우드 환경에서 REST API로 데이터를 제공받아 웹 프로그램을 개발하는 환경
	
	- 프론트엔드 중심으로 변화
		- SSR 에서 CSR로 이동
			* SSR (Server Side Rendering) : 서버에서 데이터 조합(바인딩)과 화면 구성(렌더링)을 모두 하는 방식
			* CSR (Client Side Rendering) : 서버나 클라우드(서버리스)에서 데이터를 받기만 하고 웹 브라우저(클라이언트)에서 바인딩과 렌더링을 모두 하는 방식
				* CSR 방식에서 사용하는 자바스크립트 기반 라이브러리(프레임워크) : 뷰/리액트/앵귤러
		

	
	
	- 스프링 프레임워크/JSP
		- 스프링 프레임워크 : Java EE 대신 사용하는 대규모 상용 서비스 개발 백엔드 프레임워크, 자바 언어 기반, '타임리프'라는 뷰 템플릿 엔진을 권장하지만 보통 JSP를 대신 사용
		- 스프링 부트 : 스프링에 톰캣 서버 등 다양한 기능을 내장하여 스프링을 더 쉽게 사용할 수 있도록 하는 프레임워크, JSP 사용에 제약이 있음
		- JSP : HTML + Java(JSTL/EL)
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	